#!@PYTHON@
# coding=utf-8
# Â© 2020 Mastergatto
# This code is covered under GPLv2+, see COPYING
#####################

###############
## VARIABLES ##
###############
import argparse, os, sys, platform
import gettext
import locale
import signal
import logging as log

# Set the current directory to that of this file.
launch_path = os.path.dirname(os.path.realpath(__file__))
os.chdir(launch_path)

_LOCAL = @local_build@

if _LOCAL:
    # In the local use case, use gom64p module from the sourcetree
    sys.path.insert(1, '@pythondir@')

    # In the local use case the installed schemas go in <builddir>/data
    os.environ["XDG_DATA_DIRS"] = '@schemasdir@:' + os.environ.get("XDG_DATA_DIRS", "")

else:
    if os.path.isdir(os.path.join(launch_path, "../gom64p")):
        sys.dont_write_bytecode = True
        source_path = os.path.normpath(os.path.join(launch_path, '..'))
    else:
        source_path = os.path.normpath(os.path.join(launch_path.rstrip("/bin"), "@pythondir@/gom64p".lstrip("/usr")))

    sys.path.insert(1, source_path)
    os.chdir(os.path.normpath(os.path.join(launch_path.rstrip("/bin"), "@pythondir@/gom64p".lstrip("/usr"))))

# Before importing or do anything, we must set those env variable so that this program can work correctly on Linux
#Gdk.set_allowed_backends("x11, win32, quartz")
system = platform.system()
if system == 'Linux':
    #TODO: For now force x11 backend on linux, remove this later.
    os.environ['GDK_BACKEND'] = 'x11'
    if os.environ['GDK_BACKEND'] == 'x11':
        try:
            import ctypes
            x11 = ctypes.cdll.LoadLibrary('libX11.so')
            x11.XInitThreads()
        except:
            print("Warning: failed to XInitThreads()")
    if not os.environ.get( 'PYOPENGL_PLATFORM' ):
        os.environ['PYOPENGL_PLATFORM'] = 'egl'
elif system == 'Windows':
    os.environ["PYSDL2_DLL_PATH"] = f"{os.path.dirname(os.path.realpath(__file__))}\\"
elif system == 'Darwin':
    pass

import gi

gi.require_version('Gtk', '3.0')
gi.require_version('GIRepository', '2.0')
from gi.repository import GIRepository, Gio, Gtk

LOCALE_DIR = '@localedir@'
PKGDATA_DIR = '@pkgdatadir@'


def set_exception_hook():
    """Configures sys.excepthook to enforce Gtk application exiting."""

    def new_hook(etype, evalue, etb):
        old_hook(etype, evalue, etb)
        while Gtk.main_level():
            Gtk.main_quit()
        sys.exit()

    old_hook = sys.excepthook
    sys.excepthook = new_hook

def set_internationalization():
    """Sets application internationalization."""
    try:
        locale.bindtextdomain('@application_id@', LOCALE_DIR)
        locale.textdomain('@application_id@')
    except AttributeError as e:
        # Python built without gettext support does not have
        # bindtextdomain() and textdomain().
        log.err(f"Could not bind the gettext translation domain. \
        Some translations will not work.\n> {format(e)}")

    gettext.bindtextdomain('@application_id@', LOCALE_DIR)
    gettext.textdomain('@application_id@')


def set_resources():
    """Sets application ressource file."""
    resource = Gio.resource_load(
        os.path.join(PKGDATA_DIR, '@rdnn_name@.gresource'))
    Gio.Resource._register(resource)  # nopep8


def run_application():
    """Runs gom64p application and returns its exit code."""
    import main

    try:
        application = main.GoodOldM64pApp('@application_id@')

        return application.run(sys.argv)
    except KeyboardInterrupt:
        log.warning("Keyboard interrupt (Ctrl + C), shutting down...")
        sys.exit()


def main():
    """Sets environment and runs gom64p."""
    set_exception_hook()
    set_internationalization()
    #set_resources()
    return run_application()

if __name__ == '__main__':
    if _LOCAL:
        print('Running from source tree, using local files.')
    sys.exit(main())

